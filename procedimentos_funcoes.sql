
/*Salas*/
--Retorna a lista de salas existentes e carateristicas
CREATE OR REPLACE VIEW getSalas AS
SELECT  SALAS.ID_SALA, SALAS.LOCALIZACAO, SALAS.RESPONSAVEL, UTILIZADORES.NOME, CARATERISTICAS.ID_CARATERISTICA, CARATERISTICAS.NOME_CARATERISTICA, CARATERISTICAS.SOFTWARE, SALAS_CARATERISTICAS.VALOR
FROM SALAS
INNER JOIN SALAS_CARATERISTICAS ON SALAS.ID_SALA = SALAS_CARATERISTICAS.SALA
INNER JOIN CARATERISTICAS ON CARATERISTICAS.ID_CARATERISTICA = SALAS_CARATERISTICAS.CARATERISTICA
INNER JOIN UTILIZADORES ON SALAS.RESPONSAVEL = UTILIZADORES.ID_UTILIZADOR
ORDER BY SALAS.LOCALIZACAO;

CREATE OR REPLACE TYPE c_valor FORCE IS OBJECT (CARATERISTICA VARCHAR2(20), VALOR NUMBER(30));
/
CREATE OR REPLACE TYPE tabc_valor FORCE IS TABLE OF c_valor;
/

CREATE OR REPLACE PROCEDURE getSalas_Carateristicas(v_carateristicas IN tabc_valor, lista OUT SYS_REFCURSOR) IS BEGIN
OPEN lista FOR
SELECT
gs.ID_SALA
FROM
getSalas gs
INNER JOIN TABLE(v_carateristicas) tv ON gs.NOME_CARATERISTICA = tv.CARATERISTICA
WHERE
NVL(gs.VALOR, 0) >= tv.VALOR
GROUP BY
gs.ID_SALA
HAVING
COUNT(*) = (SELECT COUNT(*) FROM TABLE(v_carateristicas));
END;
/

--Retorna uma sala
CREATE OR REPLACE PROCEDURE getSala(v_id IN NUMBER, lista OUT SYS_REFCURSOR)
IS BEGIN
OPEN lista FOR SELECT * FROM getSalas
WHERE ID_SALA = v_id
ORDER BY ID_SALA;
END;
/

--Lista todas as salas
CREATE OR REPLACE PROCEDURE getAllSalas(lista OUT SYS_REFCURSOR)
IS BEGIN
OPEN lista FOR SELECT * FROM SALAS
ORDER BY ID_SALA;
END;
/

--Adiciona uma sala
CREATE OR REPLACE PROCEDURE addEmptySala(NOME IN VARCHAR2, RESPONSAVEL IN NUMBER)
IS BEGIN
INSERT INTO SALAS VALUES ((SELECT NVL(MAX(ID_SALA), 0) + 1 FROM SALAS), NOME, RESPONSAVEL);
END;
/

--Adiciona uma Sala e respetivas carateristicas
CREATE OR REPLACE PROCEDURE addSala(LOCALIZACAO VARCHAR2, RESPONSAVEL NUMBER, v_carateristicas IN tabc_valor)
IS l_index NUMBER;
id NUMBER;
BEGIN
INSERT INTO SALAS VALUES((SELECT NVL(MAX(ID_SALA), 0) + 1 FROM SALAS), LOCALIZACAO, RESPONSAVEL)
RETURNING ID_SALA INTO id;
l_index := v_carateristicas.FIRST;
WHILE (l_index IS NOT NULL) LOOP
addCar(id, v_carateristicas(l_index).CARATERISTICA, v_carateristicas(l_index).VALOR);
l_index := v_carateristicas.NEXT(l_index);
END LOOP;
END addSala;
/

--Apaga uma sala
CREATE OR REPLACE PROCEDURE popSala(v_idSala IN NUMBER)
IS BEGIN
DELETE FROM SALAS_CARATERISTICAS WHERE SALA = v_idSala;
DELETE FROM SALAS WHERE ID_SALA = v_idSala;
END popSala;
/

--Edita uma sala
CREATE OR REPLACE PROCEDURE editSala(v_RESPONSAVEL NUMBER, v_idSala IN NUMBER, v_carateristicas IN tabc_valor)
IS l_index NUMBER;
id NUMBER;
BEGIN
UPDATE SALAS SET
RESPONSAVEL = v_RESPONSAVEL
WHERE ID_SALA = v_idSala;
l_index := v_carateristicas.FIRST;
WHILE (l_index IS NOT NULL) LOOP
addCar(v_idSala, v_carateristicas(l_index).CARATERISTICA, v_carateristicas(l_index).VALOR);
l_index := v_carateristicas.NEXT(l_index);
END LOOP;
END editSala;
/

/*Horarios*/
--Retorna o horario de uma certa sala numa certa data
CREATE OR REPLACE PROCEDURE getSalas_horario(v_sala IN VARCHAR2, v_dia IN DATE, horarios OUT SYS_REFCURSOR)
IS BEGIN
OPEN horarios FOR
SELECT RESERVAS.ID_RESERVA, RESERVAS.HORA_INICIO, RESERVAS.HORA_FIM, RESERVAS.TURMA, RESERVAS.DISCIPLINA, RESERVAS.DOCENTE, RESERVAS.PENDENTE, RESERVAS.DESCRICAO
FROM RESERVAS, SALAS
WHERE SALAS.LOCALIZACAO = v_sala AND RESERVAS.SALA = SALAS.ID_SALA AND
(DIA = v_dia OR
          DIA_SEMANA = TO_CHAR(v_dia, 'DY'));--NAO FUNCIONA
END getSalas_horario;
/

--Diz se a sala esta disponivel num certo dia e hora
CREATE OR REPLACE FUNCTION salaDisponivel(v_sala IN VARCHAR2, v_dia IN DATE, v_inicio IN NUMBER, v_fim IN NUMBER)
RETURN NUMBER IS
valor NUMBER := 0;
CURSOR horarios (v_sala IN VARCHAR2, v_dia IN DATE) IS
SELECT RESERVAS.ID_RESERVA, RESERVAS.HORA_INICIO, RESERVAS.HORA_FIM, RESERVAS.TURMA, RESERVAS.DISCIPLINA, RESERVAS.DOCENTE, RESERVAS.PENDENTE, RESERVAS.DESCRICAO
FROM RESERVAS, SALAS
WHERE SALAS.LOCALIZACAO = v_sala AND RESERVAS.SALA = SALAS.ID_SALA AND
(DIA = v_dia OR DIA_SEMANA = TO_CHAR(v_dia, 'DY'));
BEGIN
FOR horario in horarios(v_sala, v_dia) LOOP
IF(horario.HORA_INICIO = v_inicio) THEN
valor := 1;
END IF;
IF(valor = 1) THEN
IF(horario.PENDENTE = 0) THEN
RETURN 0;
END IF;
IF(horario.HORA_FIM = v_fim) THEN
valor := 0;
END IF;
END IF;
END LOOP;
Return 1;
END salaDisponivel;
/


/*Reservas*/
--Mostrar todos os pedidos de reserva
CREATE OR REPLACE PROCEDURE getAllPedidos(pedidos OUT SYS_REFCURSOR)
IS BEGIN
OPEN pedidos FOR
SELECT RESERVAS.ID_RESERVA, RESERVAS.SALA, SALAS.LOCALIZACAO, RESERVAS.HORA_INICIO, RESERVAS.HORA_FIM, RESERVAS.DIA_SEMANA, RESERVAS.TURMA, RESERVAS.DISCIPLINA, RESERVAS.DOCENTE, RESERVAS.DIA, RESERVAS.PENDENTE, RESERVAS.DESCRICAO, UTILIZADORES.NOME
FROM RESERVAS INNER JOIN SALAS ON SALAS.ID_SALA = RESERVAS.SALA INNER JOIN Utilizadores ON RESERVAS.DOCENTE = Utilizadores.ID_UTILIZADOR;
END;
/

--Mostrar pedidos de reserva de um docente
CREATE OR REPLACE PROCEDURE getPedido(v_id IN VARCHAR2, pedidos OUT SYS_REFCURSOR)
IS BEGIN
OPEN pedidos FOR
SELECT RESERVAS.ID_RESERVA, RESERVAS.SALA, SALAS.LOCALIZACAO, RESERVAS.HORA_INICIO, RESERVAS.HORA_FIM, RESERVAS.DIA_SEMANA, RESERVAS.TURMA, RESERVAS.DISCIPLINA, RESERVAS.DOCENTE, RESERVAS.DIA, RESERVAS.PENDENTE, RESERVAS.DESCRICAO, UTILIZADORES.NOME
FROM UTILIZADORES, RESERVAS INNER JOIN SALAS ON SALAS.ID_SALA = RESERVAS.SALA
WHERE UTILIZADORES.ID_UTILIZADOR = RESERVAS.DOCENTE
AND UTILIZADORES.ID_UTILIZADOR = v_id
AND RESERVAS.DOCENTE = v_id;
END getPedido;
/

--Mostrar pedidos de reserva das salas de um reponsavel de sala
CREATE OR REPLACE PROCEDURE getPedidoR(v_id IN VARCHAR2, pedidos OUT SYS_REFCURSOR)
IS BEGIN
OPEN pedidos FOR
SELECT RESERVAS.ID_RESERVA, RESERVAS.SALA, SALAS.LOCALIZACAO, RESERVAS.HORA_INICIO, RESERVAS.HORA_FIM, RESERVAS.DIA_SEMANA, RESERVAS.TURMA, RESERVAS.DISCIPLINA, RESERVAS.DOCENTE, RESERVAS.DIA, RESERVAS.PENDENTE, RESERVAS.DESCRICAO, UTILIZADORES.NOME
FROM UTILIZADORES, RESERVAS INNER JOIN SALAS ON SALAS.ID_SALA = RESERVAS.SALA
WHERE SALAS.RESPONSAVEL = (SELECT ID_UTILIZADOR FROM UTILIZADORES WHERE ID_UTILIZADOR = v_id)
AND UTILIZADORES.ID_UTILIZADOR = RESERVAS.DOCENTE;
END;
/

--Mostrar todos os pedidos de reserva pendentes
CREATE OR REPLACE PROCEDURE getAllPendentes(pedidos OUT SYS_REFCURSOR)
IS BEGIN
OPEN pedidos FOR
SELECT RESERVAS.ID_RESERVA, RESERVAS.SALA, SALAS.LOCALIZACAO, RESERVAS.HORA_INICIO, RESERVAS.HORA_FIM, RESERVAS.DIA_SEMANA, RESERVAS.TURMA, RESERVAS.DISCIPLINA, RESERVAS.DOCENTE, RESERVAS.DIA, RESERVAS.PENDENTE, RESERVAS.DESCRICAO, UTILIZADORES.NOME
FROM UTILIZADORES, RESERVAS INNER JOIN SALAS ON SALAS.ID_SALA = RESERVAS.SALA
WHERE UTILIZADORES.ID_UTILIZADOR = RESERVAS.DOCENTE
AND RESERVAS.PENDENTE = 1;
END getAllPendentes;
/

--Mostrar pedidos de reserva pendentes de um responsavel de sala
CREATE OR REPLACE PROCEDURE getPedidoPendente(v_id IN VARCHAR2, pedidos OUT SYS_REFCURSOR)
IS BEGIN
OPEN pedidos FOR
SELECT RESERVAS.ID_RESERVA, RESERVAS.SALA, SALAS.LOCALIZACAO, RESERVAS.HORA_INICIO, RESERVAS.HORA_FIM, RESERVAS.DIA_SEMANA, RESERVAS.TURMA, RESERVAS.DISCIPLINA, RESERVAS.DOCENTE, RESERVAS.DIA, RESERVAS.PENDENTE, RESERVAS.DESCRICAO, UTILIZADORES.NOME
FROM UTILIZADORES, RESERVAS INNER JOIN SALAS ON SALAS.ID_SALA = RESERVAS.SALA
WHERE SALAS.RESPONSAVEL = (SELECT ID_UTILIZADOR FROM UTILIZADORES WHERE ID_UTILIZADOR = v_id)
AND UTILIZADORES.ID_UTILIZADOR = RESERVAS.DOCENTE
AND RESERVAS.PENDENTE = 1;
END getPedidoPendente;
/

--Aceitar um pedido de reserva
CREATE OR REPLACE PROCEDURE aceitarPedido(v_pedido IN NUMBER)
IS BEGIN
UPDATE RESERVAS SET RESERVAS.PENDENTE = '0'
WHERE RESERVAS.ID_RESERVA = v_pedido;
END aceitarPedido;
/

--Inserir pedido de reserva
CREATE OR REPLACE PROCEDURE addPedido2(SALA IN VARCHAR2, HORA_INICIO IN NUMBER, HORA_FIM NUMBER,
  DIA_SEMANA IN VARCHAR2, TURMA IN VARCHAR2, DISCIPLINA IN VARCHAR2, DOCENTE IN NUMBER, DIA IN DATE, PENDENTE IN CHAR, DESCRICAO IN VARCHAR2)
IS BEGIN
INSERT INTO RESERVAS VALUES((SELECT NVL(MAX(ID_RESERVA), 0) + 1 FROM RESERVAS),
  (SELECT ID_SALA FROM Salas WHERE LOCALIZACAO = SALA),
  HORA_INICIO, HORA_FIM, DIA_SEMANA, TURMA, DISCIPLINA, DOCENTE, DIA, PENDENTE, DESCRICAO);
END;
/

CREATE OR REPLACE PROCEDURE addPedidoReserva(SALA IN VARCHAR2, HORA_INICIO IN NUMBER, HORA_FIM NUMBER,
  DIA_SEMANA IN VARCHAR2, TURMA IN VARCHAR2, DISCIPLINA IN VARCHAR2, DOCENTE IN NUMBER, DIA IN DATE, DESCRICAO IN VARCHAR2)
IS BEGIN
INSERT INTO RESERVAS VALUES((SELECT NVL(MAX(ID_RESERVA), 0) + 1 FROM RESERVAS),
  (SELECT ID_SALA FROM Salas WHERE LOCALIZACAO = SALA),
  HORA_INICIO, HORA_FIM, DIA_SEMANA, TURMA, DISCIPLINA, DOCENTE, DIA, 1, DESCRICAO);
END;
/

--Inserir pedido de reserva2
CREATE OR REPLACE PROCEDURE addPedido(SALA IN NUMBER, HORA_INICIO IN NUMBER, HORA_FIM NUMBER,
  DIA_SEMANA IN VARCHAR2, TURMA IN VARCHAR2, DISCIPLINA IN VARCHAR2, DOCENTE IN NUMBER, DIA IN DATE, DESCRICAO IN VARCHAR2)
IS BEGIN
INSERT INTO RESERVAS VALUES((SELECT NVL(MAX(ID_RESERVA), 0) + 1 FROM RESERVAS),
  SALA, HORA_INICIO, HORA_FIM, DIA_SEMANA, TURMA, DISCIPLINA, DOCENTE, DIA, 1, DESCRICAO);
END addPedido;
/

--Apagar pedidos de reserva pendentes
CREATE OR REPLACE PROCEDURE popPedidoPendente(v_pedido IN NUMBER)
IS BEGIN
DELETE FROM RESERVAS
WHERE RESERVAS.ID_RESERVA = v_pedido;
END popPedidoPendente;
/

--Editar um pedido de reserva pendente
CREATE OR REPLACE PROCEDURE editPedidoPendente(v_pedido IN NUMBER, v_SALA IN NUMBER, v_HORA_INICIO IN NUMBER, v_HORA_FIM IN NUMBER,
  v_DIA_SEMANA IN VARCHAR2, v_TURMA IN VARCHAR2, v_DISCIPLINA IN VARCHAR2, v_DOCENTE IN NUMBER, v_DIA IN DATE, v_DESCRICAO IN VARCHAR2)
IS BEGIN
UPDATE RESERVAS SET
SALA = v_SALA,
HORA_INICIO = v_HORA_INICIO,
HORA_FIM = v_HORA_FIM,
DIA_SEMANA = v_DIA_SEMANA,
TURMA = v_TURMA,
DISCIPLINA = v_DISCIPLINA,
DOCENTE = v_DOCENTE,
DIA = v_DIA,
DESCRICAO = v_DESCRICAO
WHERE ID_RESERVA = v_pedido;
END editPedidoPendente;
/

/*Users*/

CREATE OR REPLACE PROCEDURE getUserId(v_id IN NUMBER, v_lista OUT SYS_REFCURSOR) IS
BEGIN
OPEN v_lista FOR
SELECT * FROM Utilizadores WHERE(ID_UTILIZADOR = v_id);
END;
/

CREATE OR REPLACE PROCEDURE getUser(v_email IN VARCHAR2, v_pass IN VARCHAR2, v_lista OUT SYS_REFCURSOR) IS
BEGIN
OPEN v_lista FOR
SELECT * FROM Utilizadores WHERE(EMAIL = v_email AND PALAVRA_PASSE = v_pass);
END;
/

--Adicionar Utilizadores
CREATE OR REPLACE PROCEDURE AddUser(V_NOME IN VARCHAR2, V_PALAVRA_PASSE IN VARCHAR2, V_EMAIL IN VARCHAR2, V_TIPO_USER IN CHAR)
IS BEGIN
INSERT INTO Utilizadores VALUES((SELECT NVL(MAX(ID_UTILIZADOR), 0) + 1 FROM UTILIZADORES) , V_NOME, V_PALAVRA_PASSE, V_EMAIL, V_TIPO_USER);
END;
/

--Apagar Utilizadores
CREATE OR REPLACE PROCEDURE PopUser(v_id IN NUMBER)
IS BEGIN
DELETE FROM Utilizadores WHERE ID_UTILIZADOR = v_id;
END;
/

--Apagar Professores
CREATE OR REPLACE PROCEDURE PopProf(v_id IN NUMBER)
IS BEGIN
DELETE FROM RESERVAS WHERE DOCENTE = v_id;
DELETE FROM Utilizadores WHERE ID_UTILIZADOR = v_id;
END;
/

--Apagar Responsaveis de sala
CREATE OR REPLACE PROCEDURE PopResp(v_id IN NUMBER, v_new IN NUMBER)
IS BEGIN
UPDATE SALAS SET RESPONSAVEL = v_new WHERE RESPONSAVEL = v_id;
DELETE FROM RESERVAS WHERE DOCENTE = v_id;
DELETE FROM Utilizadores WHERE ID_UTILIZADOR = v_id;
END;
/

--Editar Utilizadores
CREATE OR REPLACE PROCEDURE EditUser(v_id IN NUMBER, V_NOME IN VARCHAR2, V_PALAVRA_PASSE IN VARCHAR2, V_EMAIL IN VARCHAR2, V_TIPO_USER IN CHAR)
IS BEGIN
UPDATE Utilizadores SET
NOME = V_NOME,
PALAVRA_PASSE = V_PALAVRA_PASSE,
EMAIL = V_EMAIL,
TIPO_USER = V_TIPO_USER
WHERE ID_UTILIZADOR = v_id;
END;
/

--Adicionar uma sala a um utilizador
CREATE OR REPLACE PROCEDURE addSala_User(v_user IN NUMBER, v_sala IN NUMBER)
IS BEGIN
UPDATE SALAS SET RESPONSAVEL = v_user
WHERE ID_SALA = v_sala;
END;
/

--Lista todos os utilizadores
CREATE OR REPLACE PROCEDURE listaUsers(v_cursor OUT SYS_REFCURSOR)
IS BEGIN
OPEN v_cursor FOR
SELECT * FROM UTILIZADORES ORDER BY ID_UTILIZADOR;
END;
/

--Lista todos os responsaveis de sala
CREATE OR REPLACE PROCEDURE listaResponsavel(v_cursor OUT SYS_REFCURSOR)
IS BEGIN
OPEN v_cursor FOR
SELECT * FROM UTILIZADORES
WHERE TIPO_USER = 'R' ORDER BY ID_UTILIZADOR;
END;
/

/*Carateristicas*/
--Adicionar uma nova Carateristica
CREATE OR REPLACE PROCEDURE addNewCar(NOME IN VARCHAR2, e_soft IN CHAR)
IS BEGIN
INSERT INTO CARATERISTICAS VALUES((SELECT NVL(MAX(ID_CARATERISTICA), 0) + 1 FROM CARATERISTICAS), NOME, e_soft);
END;
/

--Apagar uma Carateristica
CREATE OR REPLACE PROCEDURE popCar(id IN NUMBER)
IS BEGIN
DELETE FROM CARATERISTICAS WHERE ID_CARATERISTICA = id;
END;
/

--Editar uma Carateristica
CREATE OR REPLACE PROCEDURE editCar(id IN NUMBER, v_NOME IN VARCHAR2, e_soft IN CHAR)
IS BEGIN
UPDATE CARATERISTICAS SET
NOME_CARATERISTICA = v_NOME,
SOFTWARE = e_soft
WHERE ID_CARATERISTICA = id;
END;
/


/*Salas_Carateristicas*/
--Adicionar uma carateristica a uma sala(1)
CREATE OR REPLACE PROCEDURE addCar(v_sala IN NUMBER, id IN VARCHAR2, v_valor IN NUMBER)
IS BEGIN
INSERT INTO Salas_Carateristicas VALUES(v_sala,
 (SELECT ID_CARATERISTICA FROM CARATERISTICAS WHERE NOME_CARATERISTICA = id), v_valor);
EXCEPTION
WHEN OTHERS THEN
UPDATE SALAS_CARATERISTICAS SET
VALOR = v_valor
WHERE CARATERISTICA = (SELECT ID_CARATERISTICA FROM CARATERISTICAS WHERE NOME_CARATERISTICA = id) AND
SALA = v_sala;
END;
/

--Adicionar uma carateristica a uma sala(2)
CREATE OR REPLACE PROCEDURE addCarat(sala IN VARCHAR2, id IN NUMBER, valor IN NUMBER)
IS BEGIN
INSERT INTO Salas_Carateristicas VALUES(
  (SELECT ID_SALA FROM Salas WHERE Salas.LOCALIZACAO = sala), id, valor);
END;
/

--Adicionar uma carateristica a uma sala(3)
CREATE OR REPLACE PROCEDURE addCarSala(v_sala IN VARCHAR2, id_car IN VARCHAR2, valor IN NUMBER)
IS BEGIN
INSERT INTO Salas_Carateristicas VALUES(
  (SELECT ID_SALA FROM SALAS WHERE LOCALIZACAO = v_sala),
  (SELECT ID_CARATERISTICA FROM CARATERISTICAS WHERE NOME_CARATERISTICA = id_car),
  valor);
END;
/

/*Outros*/
--Fazer Login
CREATE OR REPLACE FUNCTION DoLogin(v_email IN VARCHAR2, v_pass IN VARCHAR2)
RETURN number IS cnumber number;
BEGIN
SELECT COUNT(*) INTO cnumber FROM Utilizadores WHERE(EMAIL = v_email AND PALAVRA_PASSE = v_pass);
RETURN cnumber;
END;
/

CREATE OR REPLACE PROCEDURE getCarateristicas(v_cursor OUT SYS_REFCURSOR)
IS BEGIN
OPEN v_cursor FOR
SELECT * FROM CARATERISTICAS ORDER BY ID_CARATERISTICA;
END;
/
