--Criação das tabelas e respetivos triggers e sequencias

DROP TABLE Reservas;
DROP TABLE Salas_Carateristicas;
DROP TABLE Carateristicas;
DROP TABLE Salas;
DROP TABLE Utilizadores;


CREATE TABLE Salas(
	ID_SALA NUMBER(4) PRIMARY KEY,
	LOCALIZACAO VARCHAR2(20)UNIQUE NOT NULL,
	RESPONSAVEL NUMBER(4)
);

CREATE TABLE Carateristicas(
	ID_CARATERISTICA NUMBER(3) PRIMARY KEY,
	NOME_CARATERISTICA VARCHAR2(20) UNIQUE,
	SOFTWARE CHAR(1) CHECK (SOFTWARE IN (0, 1))
);

CREATE TABLE Salas_Carateristicas(
	SALA NUMBER(4),
	CARATERISTICA NUMBER(3),
	VALOR NUMBER(3)
);

CREATE TABLE Utilizadores(
	ID_UTILIZADOR NUMBER(4) PRIMARY KEY,
	NOME VARCHAR2(60) NOT NULL,
	PALAVRA_PASSE VARCHAR2(20) NOT NULL CHECK(LENGTH(PALAVRA_PASSE) > 2),
	EMAIL VARCHAR2(30) NOT NULL UNIQUE,
	TIPO_USER CHAR(1) CHECK (TIPO_USER = 'P' OR TIPO_USER = 'R' OR TIPO_USER = 'F' OR TIPO_USER = 'A')
);

CREATE TABLE Reservas(
	ID_RESERVA NUMBER(6) PRIMARY KEY,
	SALA NUMBER(4) NOT NULL,
	HORA_INICIO NUMBER(4) NOT NULL,
	HORA_FIM NUMBER(4) NOT NULL,
	DIA_SEMANA VARCHAR2(3),
	TURMA VARCHAR2(30),
	DISCIPLINA VARCHAR2(30),
	DOCENTE VARCHAR2(40),
	DIA DATE,
	PENDENTE CHAR(1) CHECK (PENDENTE IN (0, 1)), --NAO ACEITA BOOLEAN NEM BIT?
	DESCRICAO VARCHAR2(50)
);

ALTER TABLE Reservas ADD CONSTRAINT RESERVA_SALA FOREIGN KEY (SALA) REFERENCES Salas(ID_SALA);
ALTER TABLE Salas ADD CONSTRAINT SALA_RESPONSAVEL FOREIGN KEY (RESPONSAVEL) REFERENCES Utilizadores(ID_UTILIZADOR);

ALTER TABLE Salas_Carateristicas ADD CONSTRAINT PK_Salas_Carateristicas PRIMARY KEY (CARATERISTICA, SALA);

ALTER TABLE Salas_Carateristicas ADD CONSTRAINT Qual_CARATERISTICA FOREIGN KEY (CARATERISTICA) REFERENCES Carateristicas(ID_CARATERISTICA);
ALTER TABLE Salas_Carateristicas ADD CONSTRAINT Qual_SALA FOREIGN KEY (SALA) REFERENCES Salas(ID_SALA);

CREATE OR REPLACE TRIGGER E_RESPONSAVEL
BEFORE INSERT OR UPDATE ON SALAS
FOR EACH ROW
	DECLARE V_TIPO_USER CHAR(1);
	user_invalido EXCEPTION;
		BEGIN
	SELECT TIPO_USER INTO V_TIPO_USER FROM UTILIZADORES WHERE ID_UTILIZADOR = :NEW.RESPONSAVEL;
	IF V_TIPO_USER <> 'R' THEN
		RAISE user_invalido;
	END IF;

EXCEPTION
	WHEN user_invalido THEN
	DBMS_OUTPUT.PUT_LINE('Utilizador invalido');
END GERA_ID_RESERVA;
/
